#!/usr/bin/env bash

dir=${BASH_SOURCE%/*}

HOMEBREW_PREFIX=${HOMEBREW_PREFIX:-/opt/homebrew}

base_dnsmasq_conf="$HOMEBREW_PREFIX/etc/dnsmasq.conf"
k8s_dnsmasq_conf="$dir/dnsmasq.conf"

source "$dir/../definitions"

# inet configurations of VMs.
# The exported variables are the ones that are used in dnsmasq.conf.
export dhcp_ranges=("$kubenet_nw_bits.2" "$kubenet_nw_bits.10")

export host_inets=()
read -r -a host_inets < <(get_inets)

# Apply local-k8s dnsmasq config.
conf_marker="local K8s dnsmasq configuration."
if ! grep -q "$conf_marker" "$base_dnsmasq_conf"; then
eval "cat << EOF
# Start of $conf_marker
$(<"$k8s_dnsmasq_conf")
# End of $conf_marker
EOF" >> "$base_dnsmasq_conf"
fi

# The workaround solution that disables macOS's default DNS and DHCP daemon.
# 1 - Create a dummy interface for dnsmasq to listen.
ifname=$(ifconfig bridge create inet $kubenet_if_inet netmask 255.255.255.0)
brew services restart dnsmasq

# 2 - Replace the dummy interface with the actual interface created by vmnet-socket.
ifconfig "$ifname" destroy
"$HOMEBREW_PREFIX"/opt/socket_vmnet/bin/socket_vmnet \
    --vmnet-gateway=$kubenet_if_inet \
    "$HOMEBREW_PREFIX"/var/run/socket_vmnet &

# Right now, dnsmasq listens the address $kubenet_if_inet, but since we removed the
# interface, the service is in malfunctioned state.
# Even though you can see its listening on lsof, trying to access dnsmasq does not work.
# However, this is enough to disable default macOS DNS & DHCP server to listen our subnet.
# So, we need to restart dnsmasq to apply the workaround solution.
# 3 - Restart dnsmasq when the interface is created by the socket.
until ifconfig | grep -q 'vmenet'; do sleep 1; done
brew services restart dnsmasq
# 4 - Wait until dnsmasq starts listening $kubenet_if_inet.
until lsof -ni4TCP:53 | grep -q '192\.168\.200\.1'; do sleep 1; done
